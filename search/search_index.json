{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Gate Operator","text":"<p>The Gate Operator solves a simple problem : orchestration among declarative kubernetes workloads.</p>"},{"location":"#why","title":"Why","text":"<p>Even though eventual consistency is a core principle of Kubernetes philosophy, it is not always achievable in a purely declarative way.</p> <ul> <li>One pod may start with default credentials before the said credentials could be retrieved. Leading to a soft lock of the pod.</li> <li>Another workload may create a LoadBalancer service before the load balancer controller was deployed. Leading to the usage of legacy controller and misconfiguration (Hello, EKS!)</li> </ul> <p>Why is eventual consistency not always achievable is open to discussion. But, it is here and we need to deal with it.</p>"},{"location":"#solution","title":"Solution","text":"<p>To solve this issue, tools exists. ArgoCd, per example, provide SyncWaves and Hooks. However, it is only applicable on the application scope or, more recently, on the ApplicationSet scope. It's a partial solution.  In the same way, Helm provides char hooks. But, again, it's only usable in the chart scope.</p> <p>These limitations make difficult to orchestrate larger workloads spread across multiple charts, applications, etc.</p> <p>Enters Gate Operator with a simple yet powerful concept to synergize with deployment tools (Helm, etc)</p>"},{"location":"#concept","title":"Concept","text":"<p>A Gate is a resource that have two possible state: opened or closed.</p> <p>It changes state when its logicial expression is validated (then become opened) or invalidated (the become closed).</p> <p>It has a logicial expression about resources in the cluster being in a certain way.</p> <p>Per exemple:</p> <ul> <li>A gate may wait for a specific Deployment to be Available</li> <li>Or to wait for a ConfigMap to be created</li> <li>Or for another gate to be Opened (or Closed)</li> </ul> <pre><code>flowchart LR\n    classDef wave1 fill:#FDE7FE,stroke:#333,stroke-width:3px;\n    classDef wave2 fill:#FDE7FE,stroke:#333,stroke-width:3px;\n    classDef wave3 fill:#F9BBFC,stroke:#333,stroke-width:3px;\n    classDef wave4 fill:#F48FFA,stroke:#333,stroke-width:3px;\n    classDef wave5 fill:#F063F8,stroke:#333,stroke-width:3px;\n\n    subgraph deploy-a [Deployment A]\n        direction LR\n        deploy-a-res1[Deployment]\n        deploy-a-res2[Secret]\n        deploy-a-res3[Resources...]\n        deploy-a-gate-out((\"Gate\"))\n        deploy-a-gate-out --&gt; deploy-a-res1 &amp; deploy-a-res2 &amp; deploy-a-res3\n\n        class deploy-a-res1 wave1;\n        class deploy-a-res2 wave1;\n        class deploy-a-res3 wave1;\n        class deploy-a-gate-out wave1;\n    end\n\n    subgraph deploy-b [Deployment B]\n        direction LR\n        deploy-b-res1[Deployment]\n        deploy-b-res2[Secret]\n        deploy-b-res3[Resources...]\n        deploy-b-gate-out((\"Gate\"))\n        deploy-b-gate-out --&gt; deploy-b-res1 &amp; deploy-b-res2 &amp; deploy-b-res3\n\n        class deploy-b-res1 wave2;\n        class deploy-b-res2 wave2;\n        class deploy-b-res3 wave2;\n        class deploy-b-gate-out wave2;\n    end\n\n    subgraph deploy-c [Deployment C]\n        direction LR\n        deploy-c-gate-in((\"Gate\"))\n        deploy-c-res1[Deployment 1]\n        deploy-c-res2[Deployment 2]\n        deploy-c-gate-internal((\"Gate\"))\n        deploy-c-res3[Deployment 3]\n        deploy-c-res4[Standalone&lt;br/&gt;Deployment]\n        deploy-c-gate-out((\"Gate\"))\n        deploy-c-gate-in --&gt; deploy-b-gate-out\n        deploy-c-gate-in ----&gt; deploy-a-gate-out\n        deploy-c-res1 &amp; deploy-c-res2 --&gt; deploy-c-gate-in\n        deploy-c-gate-internal --&gt; deploy-c-res1 &amp; deploy-c-res2\n        deploy-c-res3 --&gt; deploy-c-gate-internal\n        deploy-c-gate-out -----&gt; deploy-c-res4\n        deploy-c-gate-out --&gt; deploy-c-res3\n\n        class deploy-c-gate-in wave3;\n        class deploy-c-res4 wave3;\n\n        class deploy-c-res1 wave4;\n        class deploy-c-res2 wave4;\n        class deploy-c-gate-internal wave4;\n\n        class deploy-c-res3 wave5;\n        class deploy-c-gate-out wave5;\n    end\n\n    other[\"Other\"] --&gt; deploy-c-gate-out\n\n    class other wave5;</code></pre>"},{"location":"#synergy","title":"Synergy","text":"<ul> <li>Helm: a gate can be integrated in an application chart with the annotation <code>helm.sh/hook: pre-install</code> to prevent the creation of the chart resource before other resources are up and running.</li> <li>ArgoCD: same thing with Hook or SyncWaves. SyncWaves allows a gate to \"pause\" the deployment in the middle.</li> </ul>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#deployment-waiter","title":"Deployment waiter","text":"<p>This will open if the deployment has the Available condition set to true.</p> <pre><code>apiVersion: gate.sh/v1alpha1\nkind: Gate\nmetadata:\n  name: wait-for-a-deployment\nspec:\n  targets:\n    - targetName: MyDeployment\n      apiVersion: apps/v1\n      kind: Deployment\n      name: my-deployment\n      desiredCondition:\n        type: Available\n</code></pre>"},{"location":"examples/#gate-waiter","title":"Gate waiter","text":"<p>This will open if other gates with the given labels are opened. This is useful to abstract workloads away.</p> <pre><code>apiVersion: gate.sh/v1alpha1\nkind: Gate\nmetadata:\n  name: wait-for-other-gates\nspec:\n  targets:\n    - targetName: Gates\n      apiVersion: gate.sh/v1alpha1\n      kind: Gate\n      labelSelector:\n        matchLabels:\n          deployment-stage: stage-x\n      desiredCondition:\n        type: Opened\n</code></pre>"},{"location":"get-started/","title":"Get started","text":""},{"location":"get-started/#installation","title":"Installation","text":""},{"location":"get-started/#using-the-yaml-installer","title":"Using the YAML installer","text":"<p>Run the following command: </p> <pre><code>kubectl apply -f https://raw.githubusercontent.com/robinlioret/gate-operator/refs/heads/main/dist/install.yaml\n</code></pre>"},{"location":"get-started/#using-the-helm-chart","title":"Using the Helm chart","text":"<pre><code>helm upgrade --install ghcr.io/robinlioret/gate-operator/gate-operator:0.0.1 gate-operator\n</code></pre> <p>Possible values can be found here: https://github.com/robinlioret/gate-operator/blob/main/dist/chart/values.yaml</p>"},{"location":"get-started/#create-your-first-gate","title":"Create your first gate","text":"<pre><code>cat &lt;&lt; EOF | kubectl apply -f -\napiVersion: gate.sh/v1alpha1\nkind: Gate\nmetadata:\n  name: gate-test\nspec:\n  targets:\n    - targetName: KubeProxy\n      apiVersion: apps/v1\n      kind: DaemonSet\n      name: kube-proxy\n      namespace: kube-system\n      existsOnly: true\nEOF\n</code></pre> <p>This gate should open if kube-proxy is deployed in the namespace kube-system.</p> <pre><code>kubectl get gates -A\n</code></pre> <p>Should display : <pre><code>NAMESPACE   NAME        STATE\ndefault     gate-test   Opened\n</code></pre></p>"},{"location":"get-started/#reading-information-on-your-gates","title":"Reading information on your gates","text":"<p>You can get information on you gate with the following command</p> <pre><code>kubectl get gate gate-test -o yaml\n</code></pre> <pre><code>apiVersion: gate.sh/v1alpha1\nkind: Gate\nmetadata:\n  name: gate-test\n  namespace: default\n  # ...\nspec:\n  # ...\nstatus:\n  # Condition of the gate for programmatic access\n  conditions:\n  - lastTransitionTime: \"2025-10-31T08:40:26Z\"\n    message: Gate was evaluated to true\n    reason: GateConditionMet\n    status: \"True\"\n    type: Opened\n  - lastTransitionTime: \"2025-10-31T08:40:26Z\"\n    message: Gate was evaluated to true\n    reason: GateConditionMet\n    status: \"True\"\n    type: Available\n  - lastTransitionTime: \"2025-10-31T08:40:26Z\"\n    message: Gate was evaluated to true\n    reason: GateConditionMet\n    status: \"False\"\n    type: Closed\n  - lastTransitionTime: \"2025-10-31T08:40:26Z\"\n    message: Gate was evaluated to true\n    reason: GateConditionMet\n    status: \"False\"\n    type: Progressing\n\n  # Next time the gate will be evaluated\n  nextEvaluation: \"2025-10-31T08:51:32Z\"\n\n  # Quick information of the gate status (Opened or Closed)\n  state: Opened\n\n  # Information on each target specified. Can help for troubleshooting.\n  # The condition's type field matches the targetName field on each target.\n  targetConditions:\n  - lastTransitionTime: \"2025-10-31T08:50:32Z\"\n    message: 1 object(s) found\n    reason: ObjectsFound\n    status: \"True\"\n    type: KubeProxy\n</code></pre>"},{"location":"patterns/","title":"Patterns","text":"<p>Yolo</p>"},{"location":"patterns/argocd/","title":"Synergy with ArgoCD","text":"<p>Yolo</p>"}]}